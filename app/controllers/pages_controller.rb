class PagesController < ApplicationController
  # defaults = {title: '[AUTO]', content: 'Autogenerated content'}
  # params = defaults.merge(params)

  before_action :set_page, only: [:show, :edit, :update, :destroy]

  # REVIEW change to custom route?
  def index
    # render json: Page.all
    @pages = Page.where(parent_id: params[:parent_id]);

    # render json: Page.all
    render json: @pages
  end

  # NOTE needed?
  def show
    render json: @page, include: 'branches'
  end

  def new
    @story = Story.find(params[:story_id])
    @page = Page.new
  end

  def edit
  end

  def create
    @story = Story.find(params[:story_id])
    @page = @story.pages.build(page_params)

    if @page.save!
      if(params[:parent_id])
        @parent = Page.find(params[:parent_id]);
        @parent.branches << @page
      end

       render json: @page, status: 201
    else
       render json: { error: "Error saving page", status: 400 }, status: 400
    end
  end

  # TODO Update this later
  def update
    @story = Story.find(params[:story_id])
    # @page = Page.find(page_params)
    # @page = @story.pages.build(page_params)
    # REVIEW better way to do this?
    # @page = @story.pages.build(page_params)
    # @page = @story.pages.create(page_params)
    # @choices = params[:choices]

    # FIXME Should only create child pages the FIRST time a page is updated
    # OR only make child pages after they have been saved? The moment you access them?
    # if @choices
    #   @choices.each_with_index do |choice,index|
    #     if(!choice.saved)
    #       pageHash = {story_id: @story.id, title: "Child #{index} Page of Page #{@page.title}", choice_text: choice}
    #
    #       if(params[:parent_id])
    #         # pageHash.parent_id = params[:parent_id]
    #         pageHash.parent_page = Page.find(params[:parent_id]);
    #       end
    #
    #       # TODO how to make new pages associate with story and their parent page?
    #       newPage = @story.pages.create!({title: "Child #{index} Page of Page #{@page.title}", choice_text: choice})
    #       @page.branches.push(newPage)
    #       # @page.branches.create!({title: "Child #{index} Page of Page #{@page.title}", choice_text: choice})
    #       # REVIEW better way to do this?
    #
    #       # @page.branches.create!({story_id: @story.id, title: "Child #{index} Page of Page #{@page.title}", choice_text: choice})
    #       # @page.branches.create!(pageHash)
    #       # newPage.story = @story
    #
    #     end
    #   end
    # end

    # @page.save

    if @page.update(page_params)
      render json: @page
    else
      render json: @page.errors, status: :unprocessable_entity
    end
  end

  def destroy
    if(params[:parent_id])
      @parent = Page.find(params[:parent_id]);
    end

    @page.destroy

    render json: @parent
    # respond_to do |format|
      # format.html { redirect_to pages_url, notice: 'Page was successfully destroyed.' }
      # format.json { head :no_content }
    # end
  end

  private
    def set_page
      # TODO refactor this to search in @story.pages
      # @story = Story.find(params[:story_id])
      @page = Page.find(params[:id])
    end

    # TODO update for proper reqs and permits
    def page_params
      # params.require(:page).permit(:title, :content)
      params.require(:page).permit(:title, :content, :choice_text)
    end
end
